#!/usr/bin/env python
# vim: ts=4 sw=4 noet syntax=python:
import evdev
import asyncio
import sys
import signal
import traceback

def exexit(code=255):
	try:
		maploop.stop()
		extype,exinfo,extrbk=sys.exc_info()
		print("-KEYMAPPER-EXCEPTION-\n Excepton of type [%s]\n Details included [%s]\n-stack trace follows-\n%s"%(extype,exinfo,traceback.print_tb(extrbk)))
	finally:
		sys.exit(code)
def sigged(num,frm):
	maploop.stop()
	raise Exception("Invalid signal received, killing.")
	sys.exit(200)
def setmap():
	globals().update(evdev.ecodes.ecodes)
	mapping={}
	def mapkey(key,normal,fn):
		mapping[key]={():normal,(KEY_FN,):fn}
	def remap(key,out):
		mapping[key]={():out}
	def mapfn(key,fn):
		mapkey(key,key,fn)
	def fnkey(key):
		mapkey(key,KEY_FN,KEY_FN)
	fnkey(KEY_LEFTCTRL)
	remap(KEY_LEFTMETA,KEY_LEFTCTRL)
	mapfn(KEY_POWER,KEY_SYSRQ)
	mapfn(KEY_UP,KEY_PAGEUP)
	mapfn(KEY_DOWN,KEY_PAGEDOWN)
	mapfn(KEY_LEFT,KEY_HOME)
	mapfn(KEY_RIGHT,KEY_END)
	mapfn(KEY_BACKSPACE,KEY_DELETE)
#	mapfn(KEY_F6,KEY_BRIGHTNESSDOWN)
#	mapfn(KEY_F7,KEY_BRIGHTNESSUP)
	mapfn(KEY_F6,decrease_brightness)
	mapfn(KEY_F7,increase_brightness)
	mapfn(KEY_F8,KEY_MUTE)
	mapfn(KEY_F9,KEY_VOLUMEDOWN)
	mapfn(KEY_F10,KEY_VOLUMEUP)
	mapfn(KEY_RIGHTALT,KEY_COMPOSE)# still have to use -option compose:ralt b/c KEY_COMPOSE maps to menu by default.
	mapfn(KEY_EQUAL,KEY_INSERT)
	return mapping

# vim: syntax=python ts=2 sw=2 noet
class Backlight:
    __targets={ "val":"/brightness",
            "max":"/max_brightness",
            "cur":"/actual_brightness" } 
    def __init__(self,path=""):
        self.__path=path
    def set(self,val):
        open(self.__path+self.__targets["val"],"w").write(str(max(min(val,self.max()),0)))
    def cur(self):
        return int(open(self.__path+self.__targets["cur"]).read())
    def max(self):
        return int(open(self.__path+self.__targets["max"]).read())
    def add(self,amt):
        self.set(self.cur()+amt)

backlight=Backlight("/sys/class/backlight/intel_backlight")

def increase_brightness(krd,val,key):
    backlight.add(42)

def decrease_brightness(krd,val,key):
    backlight.add(-42)


class KeyRemapperDevice:
	def __init__(self, readdev, mapping, grab=True):
		self._readdev = readdev
		if (grab):
			self._readdev.grab()
		self._mapping = mapping
		self._outputs = self._readdev.capabilities()
		self._outputs[EV_KEY] = evdev.ecodes.keys.keys() 
		del self._outputs[0]
		self._senddev = evdev.UInput (self._outputs, name=("s/"+self._readdev.name+"/.../g" ))
		self._keydown = set()
		asyncio.ensure_future(self.runloop())
	async def runloop(self):
		try:
			async for inputev in self._readdev.async_read_loop():
				if inputev.type == EV_KEY and self.has_key(inputev.code):
					self.set_key(self.map_key(inputev.code),inputev.value,inputev.code)
				else:
					self._senddev.write_event(inputev)
					self._senddev.syn()
		except:
			exexit(32)
	def has_key(self,key):
		return key in self._mapping.keys()
	def set_key(self,key,value,code):
		if (value==0):
			map(lambda keycode: keyself._keydown.discard(keycode) if type(keycode)==int else None,self._mapping[code].values())
		if type(key)==int:
			if value:
				self._keydown.add(key)
			else:
				self._keydown.discard(key)
			self._senddev.write(EV_KEY,key,value)
			self._senddev.syn()
		else:
			key(self,value,code)
	def map_key(self,inkey):
		posmaps=[(mapwhen,remapto) for mapwhen,remapto in self._mapping.get(inkey,{}).items() if set(mapwhen)<=self._keydown]
		posmaps.sort(key=lambda item:len(item[0]),reverse=True)
		return posmaps[0][1]

def main():
	mapping = setmap()
	devices = [evdev.InputDevice(devnode) for devnode in evdev.list_devices()]
	mapkbds = [
			kbditer for kbditer in [
				evdev.InputDevice(devnode) for devnode in evdev.list_devices()
				] if len([
					keysym for keysym in kbditer.capabilities().get(EV_KEY,[])
					if keysym not in evdev.ecodes.BTN])>10]
	mappers = list([ KeyRemapperDevice(kbd2map,mapping) for kbd2map in mapkbds ])
	global maploop
	maploop = asyncio.get_event_loop()
	maploop.run_forever()


if (__name__ == '__main__'):
	try:
		signal.signal(signal.SIGTSTP,sigged)
		main()
	except:
		exexit(16)
