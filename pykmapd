#!/usr/bin/env python3
# vim: ts=4 sw=4 noet syntax=python:
import evdev
import asyncio
import sys
import signal
import traceback
import os

def cmd(foo):
	foo=str(foo)
	print(foo)
	os.system(foo)

def exexit(code=255):
	extype,exinfo,extrbk=sys.exc_info()
	print("-KEYMAPPER-EXCEPTION-\n Excepton of type [%s]\n Details included [%s]\n-stack trace follows-\n%s"%(extype,exinfo,traceback.print_tb(extrbk)))
	sys.exit(code)

def sigged(num,frm):
	maploop.stop()
	raise Exception("Invalid signal received, killing.")
	sys.exit(200)

def setmap():
	#eventually have FnKey be a class?
	#implement virtual mouse
	mapping={}
	def kfunc(fnkey,*kfarg):
		if type(fnkey)==int:
			return fnkey
		else:
			return (lambda krd,val,key: fnkey(krd,val,key,*kfarg))
	def mapkey(key,normal,fn,*kfarg):
		mapping[key]={():kfunc(normal,*kfarg),(KEY_FN,):kfunc(fn,*kfarg)}
	def remap(key,out,*kfarg):
		mapping[key]={():kfunc(out,*kfarg)}
	def mapfn(key,fn,*kfarg):
		mapkey(key,key,fn,*kfarg)
	def setfn(key,*kfarg):
		mapkey(key,KEY_FN,KEY_FN,*kfarg)
	setfn(KEY_FORWARD)
	remap(KEY_CAPSLOCK,KEY_LEFTCTRL)
	remap(KEY_BACK,KEY_TAB)
	mapfn(KEY_F2,KEY_F3)
	mapfn(KEY_VOLUMEUP,volume,-7)
#	mapfn(KEY_POWER,KEY_SYSRQ)
#	mapfn(KEY_UP,KEY_PAGEUP)
#	mapfn(KEY_DOWN,KEY_PAGEDOWN)
#	mapfn(KEY_LEFT,KEY_HOME)
#	mapfn(KEY_RIGHT,KEY_END)
#	mapfn(KEY_BACKSPACE,KEY_DELETE)
	mapfn(KEY_PAGEDOWN,brightness,-42)
	mapfn(KEY_PAGEUP,brightness,42)
	remap(KEY_VOLUMEDOWN,volume,-7)
	remap(KEY_VOLUMEUP,volume,7)
	mapfn(KEY_MINUS,volume,-7)
	mapfn(KEY_EQUAL,volume,7)
	remap(KEY_MUTE,volume,None)
#	mapfn(KEY_F6,decrease_brightness)
#	mapfn(KEY_F7,increase_brightness)
#	mapfn(KEY_F8,KEY_MUTE)
#	mapfn(KEY_F9,KEY_VOLUMEDOWN)
#	mapfn(KEY_F10,KEY_VOLUMEUP)
	mapfn(KEY_RIGHTALT,KEY_COMPOSE)# still have to use -option compose:ralt b/c KEY_COMPOSE maps to menu by default.
#	mapfn(KEY_EQUAL,KEY_INSERT)
	mapfn(KEY_1,BTN_LEFT)
	mapfn(KEY_2,BTN_MIDDLE)
	mapfn(KEY_3,BTN_RIGHT)
	mapfn(KEY_W,mouserel,0,-1,0)
	mapfn(KEY_A,mouserel,-1,0,0)
	mapfn(KEY_S,mouserel,0,1,0)
	mapfn(KEY_D,mouserel,1,0,0)
	mapfn(KEY_F,mouserel,0,0,-1)
	mapfn(KEY_R,mouserel,0,0,1)
	mapfn(KEY_UP,mouserel,0,-1,0)
	mapfn(KEY_LEFT,mouserel,-1,0,0)
	mapfn(KEY_DOWN,mouserel,0,1,0)
	mapfn(KEY_RIGHT,mouserel,1,0,0)
	mapfn(KEY_L,mouserel,0,0,-1)
	mapfn(KEY_O,mouserel,0,0,1)
	return mapping

# vim: syntax=python ts=2 sw=2 noet
class Backlight:
    __targets={ "val":"/brightness",
            "max":"/max_brightness",
            "cur":"/actual_brightness" } 
    def __init__(self,path=""):
        self.__path=path
    def setbr(self,val):
        open(self.__path+self.__targets["val"],"w").write(str(max(min(val,self.max()),0)))
    def curbr(self):
        return int(open(self.__path+self.__targets["cur"]).read())
    def maxbr(self):
        return int(open(self.__path+self.__targets["max"]).read())
    def addbr(self,amt):
        self.setbr(self.cur()+amt)


backlight=Backlight("/sys/class/backlight/intel_backlight")

def keydown(kfn):
	return ( lambda krd,val,key,*arg: ((lambda *arg:None) if val==0 else kfn)(krd,val,key,*arg) )

@keydown
def increase_brightness(krd,val,key):
    backlight.addbr(42)

@keydown
def decrease_brightness(krd,val,key):
    backlight.addbr(-42)

@keydown
def brightness(krd,val,key,arg):
	backlight.addbr(arg)

@keydown
def volume(krd,val,key,arg):
	if arg is not None:
		cmd("pactl set-sink-volume @DEFAULT_SINK@ %+d%%"%(arg))
	else:
		cmd("pactl set-sink-mute @DEFAULT_SINK@ toggle")

@keydown	
def mouserel(krd,val,key,x,y,w):
	#this function signature is stupid	
	mag = 1 if (krd.get_key(KEY_LEFTSHIFT) or krd.get_key(KEY_RIGHTSHIFT)) else 19
	[krd.send_ev(EV_REL,code,value) for code,value in zip((REL_X,REL_Y,REL_WHEEL),(x*mag,y*mag,w))]

class KeyRemapperDevice:
	def __init__(self, readdev, mapping, grab=True):
		self._readdev = readdev
		if (grab):
			self._readdev.grab()
		self._mapping = mapping
		self._outputs = self._readdev.capabilities()
		self._outputs[EV_KEY] = evdev.ecodes.keys.keys()
		self._outputs[EV_REL] = [REL_X,REL_Y,REL_WHEEL]
		del self._outputs[0]
		global num_kbds
		num_kbds+=1
		self._senddev = evdev.UInput (self._outputs, name=("__pykmapd_uinput_%d__"%(num_kbds)))
		self._keydown = set(readdev.active_keys())
		asyncio.ensure_future(self.runloop())
	async def runloop(self):
		try:
			async for inputev in self._readdev.async_read_loop():
				if inputev.type == EV_KEY:
					self.map_key(inputev)
				else:
					self.echo_ev(inputev)
		except:
			exexit(32)
	def set_key(self,code,maps,value):
			if value:
				self._keydown=self._keydown.union(set((code,maps[0][1])))
			else:
				self._keydown=self._keydown.difference(set([code]+[key[1] for key in maps]))
			self.send_ev(EV_KEY,maps[0][1],value)
	def get_key(self,key):
		return key in self._keydown
	def map_key(self,inkey):
		posmaps=[(mapwhen,remapto) for mapwhen,remapto in self._mapping.get(inkey.code,{}).items() if set(mapwhen)<=self._keydown] or [([],inkey.code)]
		posmaps.sort(key=lambda item:len(item[0]),reverse=True)
		if type(posmaps[0][1])==int:
			self.set_key(inkey.code,posmaps,inkey.value)
		else:
			posmaps[0][1](self,inkey.value,inkey.code)
	def send_ev(self,kind,code,value):
		self._senddev.write(kind,code,value)
	def echo_ev(self,inputev):
		self._senddev.write_event(inputev)
		self._senddev.syn()

def main():
	globals().update(evdev.ecodes.ecodes)
	global num_kbds
	num_kbds=0
	mapping = setmap()
	devices = [evdev.InputDevice(devnode) for devnode in evdev.list_devices()]
	mapkbds = [
			kbditer for kbditer in [
				evdev.InputDevice(devnode) for devnode in evdev.list_devices()
				] if (len([
					keysym for keysym in kbditer.capabilities().get(EV_KEY,[])
					if keysym not in evdev.ecodes.BTN])>10 and ((kbditer.name.lower()).find("keyboard")>=0))]
	mappers = list([ KeyRemapperDevice(kbd2map,mapping) for kbd2map in mapkbds ])
	global maploop
	maploop = asyncio.get_event_loop()
	maploop.run_forever()


if (__name__ == '__main__'):
	try:
		signal.signal(signal.SIGTSTP,sigged)
		main()
	except:
		exexit(16)
