#!/usr/bin/env python
import evdev
devices = [evdev.InputDevice(fn) for fn in evdev.list_devices()]
kbddevs = [dev for dev in devices if dev.name.lower().find('keyboard')>-1]
mainkbd = kbddevs[0]
e = evdev.ecodes
entries = {}
mapkeys = []
def mapkey(key,normal,fn):
    global entries,mapkeys
    entries[(key,False)]=normal
    entries[(key,True)]=fn
    if key not in mapkeys:
        mapkeys+=[key]
def mapone(key,out):
    mapkey(key,out,out)
def mapfn(key,fn):
    mapkey(key,key,fn)
def fnkey(key):
    mapone(key,e.KEY_FN)
fnkey(e.KEY_LEFTCTRL)
mapone(e.KEY_LEFTMETA,e.KEY_LEFTCTRL)
mapfn(e.KEY_POWER,e.KEY_SYSRQ)
mapfn(e.KEY_UP,e.KEY_PAGEUP)
mapfn(e.KEY_DOWN,e.KEY_PAGEDOWN)
mapfn(e.KEY_LEFT,e.KEY_HOME)
mapfn(e.KEY_RIGHT,e.KEY_END)
mapfn(e.KEY_BACKSPACE,e.KEY_DELETE)
mapfn(e.KEY_F6,e.KEY_BRIGHTNESSDOWN)
mapfn(e.KEY_F7,e.KEY_BRIGHTNESSUP)
mapfn(e.KEY_F8,e.KEY_MUTE)
mapfn(e.KEY_F9,e.KEY_VOLUMEDOWN)
mapfn(e.KEY_F10,e.KEY_VOLUMEUP)
mapfn(e.KEY_RIGHTALT,e.KEY_COMPOSE) # still have to use -option compose:ralt b/c KEY_COMPOSE maps to menu by default.
kmapkbd = evdev.UInput( { e.EV_KEY : e.keys.keys() }, name="pykmapd-remapped-keyboard")
mainkbd.grab()
fnstate = False
for ev in mainkbd.read_loop():
    if ev.type != e.EV_KEY or ev.code not in mapkeys:
        kmapkbd.write_event(ev)
        kmapkbd.syn()
        continue
    outkey=entries[(ev.code,fnstate)]
    if outkey == e.KEY_FN:
        fnstate = ( ev.value >= 1 )
        continue
    kmapkbd.write(e.EV_KEY,outkey,ev.value)
    kmapkbd.syn()
